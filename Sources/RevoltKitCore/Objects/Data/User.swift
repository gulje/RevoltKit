//
//  User.swift
//
//
//  Created by gulje on 19.06.2023.
//

import Foundation

public enum Presence: String, Codable {
  case online = "Online"
  case idle = "Idle"
  case focus = "Focus"
  case busy = "Busy"
  case invisible = "Invisible"
}

public enum Relationship: String, Codable {
  case none = "None"
  case user = "User"
  case friend = "Friend"
  case outgoing = "Outgoing"
  case incoming = "Incoming"
  case blocked = "Blocked"
  case blockedOther = "BlockedOther"
}

public struct Profile: Codable {
  public let content: String?

  public let background: File?
}

public struct Status: Codable {
  public let text: String?

  public let presence: Presence?
}

public struct Relations: Codable {
  private var _id: String
  public var id: String {
    return _id
  }

  public let status: Relationship
}

public struct IsBot: Codable {
  public let owner: String
}

public struct User: Equatable, Codable {
  public let id: String

  /// Username of the user
  public let username: String

  /// Discriminator of the user
  public let discriminator: String

  /// Display name of user
  public let displayName: String?

  /// Representation of a File on Revolt generated by Autumn (CDN)
  public let avatar: File?

  /// Bitfield of user badges
  public let badges: UInt32?

  /// User's active status
  public let status: Status?

  /// User's profile
  public let profile: Profile?

  /// User flags
  public let flags: UInt32?

  /// Whether this user is privileged
  public let isPrivileged: Bool?

  /// Bot information for if the user is a bot
  public let bot: IsBot?

  /// User's relationship with another user (or themselves)
  public let relationship: Relationship?

  /// Whether the user is currently online
  public let isOnline: Bool?

  public let relations: [Relationship]?

  private enum CodingKeys: String, CodingKey {
    case id = "_id"
    case username
    case discriminator
    case displayName = "display_name"
    case avatar
    case badges
    case status
    case profile
    case flags
    case isPrivileged = "privileged"
    case bot
    case relationship
    case isOnline = "online"
    case relations
  }

  public static func == (lhs: User, rhs: User) -> Bool {
    lhs.id == rhs.id
  }
}
