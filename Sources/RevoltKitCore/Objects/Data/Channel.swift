//
//  Channel.swift
//  
//
//  Created by gulje on 20.06.2023.
//

import Foundation

public enum ChannelType: String, Codable {
    case SavedMessages
    case DirectMessage
    case Group
    case TextChannel
    case VoiceChannel
}

public struct PermissionTable: Codable {
    public let a: UInt64
    public let d: UInt64
}

public struct Channel: Codable, Equatable {
    public static func == (lhs: Channel, rhs: Channel) -> Bool {
        lhs.id == rhs.id
    }
    
    private enum CodingKeys: String, CodingKey {
        // Present all the time
        case channel_type
        case id = "_id"
        
        // Present in SavedMessages
        case user
        
        // Present in DirectMessage
        case active
        
        // Present in Group
        case permissions
        case owner
        
        // Present in DirectMessage and Group
        case recipients
        
        // Present in TextChannel and VoiceChannel
        case default_permissions
        case role_permissions
        case server
        
        // Present in DirectMessage, Group and TextChannel
        case last_message_id
        
        // Present in Group, TextChannel and VoiceChannel
        case icon
        case description
        case nsfw
        case name
    }
    
    /// Unique ID, present all the time
    public let id: String
    
    /// Channel type, present all the time
    public let channel_type: ChannelType
    
    /// ID of the user the channel belongs to, present in `SavedMessages`
    public let user: String?
    
    /// Whether this direct message channel is currently open on both sides, present in `DirectMessage`
    public let active: Bool?
    
    /// Permissions assigned to members of this group (does not apply to the owner of the group), present in `Group`
    public let permissions: UInt64?
    
    /// User ID of the owner of group, present in `Group`
    public let owner: String?
    
    /// Array of user ids participating in channel, present in `DirectMessage` and `Group`
    public let recipients: [String]?
    
    /// Representation of a single permission override as it appears on models and in the database, present in `TextChannel` and `VoiceChannel`
    public let default_permissions: [PermissionTable]?
    
    /// Permissions assigned based on role to this channel, present in `TextChannel` and `VoiceChannel`
    public let role_permissions: [String: PermissionTable]?
    
    /// ID of the server this channel belongs to, present in `TextChannel` and `VoiceChannel`
    public let server: String?
    
    /// ID of the last message sent this channel, present in `Group`, `TextChannel` and `DirectMessage`
    public let last_message_id: String?
    
    /// Representation of a File on Revolt generated by Autumn, present in `Group`, `TextChannel` and `VoiceChannel`
    public let icon: File?
    
    /// Channel description, present in `Group`, `TextChannel` and `VoiceChannel`
    public let description: String?
    
    /// Display name of the channel, present in `Group`, `TextChannel` and `VoiceChannel`
    public let name: String?
    
    /// Whether this channel is marked as not safe for work
    public let nsfw: Bool?
}
