//
//  Message.swift
//  
//
//  Created by gulje on 20.06.2023.
//

import Foundation

public struct Message: Codable, Equatable {
    public static func == (lhs: Message, rhs: Message) -> Bool {
        lhs.content == rhs.content
    }
    
    private enum CodingKeys: String, CodingKey {
        case id = "_id"
        case nonce
        case channel
        case author
        case webhook
        case content
        case system
        case attachments
        case edited
        case embeds
        case mentions
        case replies
        case reactions
        case interactions
        case masquerade
    }
    
    /// Unique ID
    public let id: String
    
    /// Unique value generated by client sending this message
    public let nonce: String?
    
    /// ID of the channel this message was sent in
    public let channel: String
    
    /// ID of the user or webhook that sent this message
    public let author: String
    
    /// Information about the webhook bundled with Message
    public let webhook: Webhook?
    
    /// Message content
    public let content: String?
    
    /// System message
    public let system: SystemMessageData?
    
    /// Attachments
    public let attachments: [File]?
    
    /// ISO8601 formatted timestamp
    public let edited: String?
    
    /// Attached embeds to this message
    public let embeds: [Embed]?
    
    /// Array of user IDs mentioned in this message
    public let mentions: [String]?
    
    /// Array of message IDs this message is replying to
    public let replies: [String]?
    
    /// Hashmap of emoji IDs to array of user IDs
    public let reactions: [String: [String]]?
    
    /// Information about how this message should be interacted with
    public let interactions: Interactions?
    
    /// Name and / or avatar overrides for this message
    public let masquerade: Masquerade?
}

// MASQUERADE

public struct Masquerade: Codable {
    public let name: String?
    
    public let avatar: String?
    
    /// Must have `ManageRole` permission to use
    public let colour: String?
}

// INTERACTIONS

public struct Interactions: Codable {
    enum CodingKeys: String, CodingKey {
        case reactions
        case restrictReactions = "restrict_reactions"
    }
    
    /// Reactions which should always appear and be distinct
    public let reactions: [String]?
    
    /// Whether reactions should be restricted to the given list.
    /// Can only be set to true if reactions list is of at least length 1
    public let restrictReactions: Bool?
}

// WEBHOOK

public struct Webhook: Codable {
    public let name: String
    public let avatar: String?
}

// SYSTEM MESSAGE

public struct SystemMessageData: Codable {
    public let type: SystemMessageType
    
    /// Present in `text`
    public let content: String?
    
    /// Present in `userAdded`, `userRemove`, `userJoined`, `userLeft`,
    /// `userKicked`, `userBanned`
    public let id: String?
    
    /// Present in `userAdded`, `userRemove`, `channelRenamed`, `channelDescriptionChanged`,
    /// `channelIconChanged`
    public let by: String?
    
    /// Present in `channelRenamed`
    public let name: String?
    
    /// Present in `channelOwnershipChanged`
    public let from: String?
    
    /// Present in `channelOwnershipChange`
    public let to: String?
}

public enum SystemMessageType: String, Codable {
    case text
    case userAdded = "user_added"
    case userRemove = "user_remove"
    case userJoined = "user_joined"
    case userLeft = "user_left"
    case userKicked = "user_kicked"
    case userBanned = "user_banned"
    case channelRenamed = "channel_renamed"
    case channelDescriptionChanged = "channel_description_changed"
    case channelIconChanged = "channel_icon_changed"
    case channelOwnershipChanged = "channel_ownership_changed"
}

